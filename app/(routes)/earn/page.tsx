"use client";

import ModalV2 from "@/components/common/ModalV2";
import EarnSection from "@/components/earn/EarnSection";
import RewardSection from "@/components/earn/RewardSection";
import useWindowSize from "@/hooks/useWindowSize";
import { useEffect, useState } from "react";
import DepositModal from "@/components/earn/TopUpModal";
import EarnHero from "@/components/earn/EarnHero";
import EntryButtons from "@/components/earn/EntryButtons";
import {
  getClaimableRewards,
  getAllTimeRewards,
} from "@/lib/web3/actions/getRewards";
import { useWallet } from "@/hooks/useWallet";
import { PublicKey, Transaction } from "@solana/web3.js";
import { contractAddresses } from "@/lib/web3/config";

/**
 * @audit Need to bind "earnedToDate"
 * To do this, query the subgraph that we set up.
 */
const EarnPage = () => {
  const [earnedToDate, setEarnedToDate] = useState<{
    amount: string;
    usdValue: string;
  }>({ amount: "0", usdValue: "0" });
  const [availableToClaim, setAvailableToClaim] = useState<number>(0);
  const [isPositive, setIsPositive] = useState<boolean>(true);
  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);
  const [isPoolInitialized, setIsPoolInitialized] = useState<boolean>(false);
  const { width } = useWindowSize();
  const {
    program,
    connection,
    address: publicKey,
    signTransaction,
  } = useWallet();

  useEffect(() => {
    const checkPool = async () => {
      const poolAddress = new PublicKey(contractAddresses.devnet.poolStatePda);

      if (!poolAddress) return;

      try {
        const account = await connection.getAccountInfo(poolAddress);
        setIsPoolInitialized(account !== null);

        if (!account) {
          console.log(
            "Pool not initialized yet at address:",
            poolAddress.toString()
          );
        }
      } catch (error) {
        console.error("Error checking pool:", error);
      }
    };

    checkPool();
  }, [connection]);

  useEffect(() => {
    const fetchData = async () => {
      if (!publicKey || !program) return;

      const [allTimeRewards, claimableRewards] = await Promise.all([
        getAllTimeRewards(program, new PublicKey(publicKey)),
        getClaimableRewards(program, new PublicKey(publicKey)),
      ]);

      setAvailableToClaim(parseFloat(claimableRewards.formattedAmount));
      setEarnedToDate({
        amount: allTimeRewards.totalRewardsFormatted,
        usdValue: allTimeRewards.totalRewardsFormatted,
      });
    };

    fetchData();
  }, [publicKey, isPoolInitialized, program]);

  return (
    <div className="pb-32">
      <EarnHero
        mainTitle="Print3r Earning Vaults"
        subTitle="Deposit crypto or cash to automatically earn 50% of all of the revenue generated by the Print3r platform."
        secondTitle="New to Print3r Earning Vaults?"
        secondSubTitle="Learn about what Print3r earnings vaults are, what the benefits are and how to get started."
        docLink="#"
      />
      <EarnSection isPoolInitialized={isPoolInitialized} />
      <RewardSection
        earnedToDate={earnedToDate}
        availableToClaim={availableToClaim}
        program={program}
        connection={connection}
        publicKey={publicKey ? new PublicKey(publicKey) : null}
        signTransaction={
          signTransaction || (() => Promise.resolve(new Transaction()))
        }
      />
      {width && width < 1024 && (
        <EntryButtons
          positiveText="Deposit"
          negativeText="Withdraw"
          title="Manage your vault"
          mobileVariant
          onClick={() => setIsModalOpen(true)}
          isPositive={isPositive}
          setIsPositive={setIsPositive}
          showIcons={false}
        />
      )}
      <ModalV2 isOpen={isModalOpen} setIsModalOpen={setIsModalOpen}>
        <DepositModal setIsModalOpen={setIsModalOpen} />
      </ModalV2>
    </div>
  );
};

export default EarnPage;
